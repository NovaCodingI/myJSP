가장 사용 많이 되는 영역은 request 영역입니다.

서블릿 = .java

http 서블릿이라는 객체를 익스텐즈(extends) 상속받기

어떤 자바 객체가 실행될건지 지정
web.xml
어떤 uri이 들어오면 어떤 서블릿을 실행해.

@어노테이션 이용해서 매핑이 가능

1. 설정파일
2. 어노테이션

어떤 uri
i는 식별자를 의미함
서블릿은 지정해주는 이름이 있어요 객체를 매핑.
uri요청이 오게되면 지정해준 이름!!

사용자 요청이 오면 request 안에 정보들 DTO객체를 뽑아내요
getrequestparameter를 통해서 id, pw 입력해서
dto에 넣어서 이동

지금은 비지니스로직, 서블릿과 함께사용중이지만 나중에는 별도로 빼요

서블릿은 DAO를 호출해서 그 결과를 DTO로 받아옴 혹은 링크로 받아옴

DTO를 request영역에 담아주는것

JSP로 forward 시키고 페이지는 ???

----
1) extends HttpServlet 후
2) doGet 자동완성, Override 
3) sendredirect, forward 두가지밖에 업서용
4) 서블릿이 호출되도록 url과 매핑 시켜줘야해요
5) web.xml

사용자 요청 → JSP 처리

jsp는 화면적인 처리만하고
?? 는 로직적인 부분을..

요청을 받는건 컨트롤러 서블릿이 하는것이고
비지니스 로직을 구성하는건 백단. 자바에서 하는거고
페이지를 전환하는데 JSP


리퀘스트 영역을 공유 하려면 forward
아니야 나는 공유 안할래 sendredirect


메소드에

do가 붙으면 요청인걸로 아세요!!


파일이 디컴파일되었다면 볼수있찌만!!
디컴파일러 이용해서 디컴파일러된 파일 한번 확인해볼게요!!

톰켓이 서블릿을 관리하는것
톰켓이 서블릿 컨테이너를 만들고
객체를 생성하고 실행하고 소멸하고
다~ 톰켓이 관리해주는것.

.do
는 그냥 식별자

@webServlet("/13서블릿/A")이 들어오면 실행해
서블릿이 뭐에요?
HttpServlet 객체에 상속(extends)받은 객체를 서블릿이라고 합니다

앞으로 JSP는 출력만할꺼에요!!

매핑 url과 클래스 name은 전혀 상관없지만 일치하면
찾기 쉽습니다.


doGet( )
매개변수의 변수명
서블릿을 자동으로 만들면 request
doGet 메소드를 오버라이딩 해서 만들면 req로 나와요

@어노테이션
메타데이터?
서버가 실행하기전에 전체적으로 읽어들여와서 실행하기때문에
폴더경로라던가 중복되면 오류가 발생하기때문에 찾기 어려울수있으므로 꼭 확인해야한다!!

서버가 재시작한다
서블릿은 web.xml
수정하고 재시작해야지 수정사항이 반영됩니다.
자동으로 재시작은 해주지만 다시 실행 하는걸 권장합니다.


컨트롤러를 거치지 않고 JSP를 바로 호출했죠!!

setAttribute하는것은 컨트롤러
출력이 안되는게 맞습니다.

init메서드 오버라이딩 (서블릿을 초기화)

forward 하면 먹혀서 경로 안나와
redirect로 하면 경로 나옵니다
서블릿에서 경로가 어떻게 출력이 되는지


/*
.jsp파일을 view라고 합니다
요청은 controller
요청을 받는 부분은 컨트롤러
응답하는 부분은 뷰라고 할겁니다.

MVC모델

요청 url과 서블릿이 분리가 되어있어서 매핑이 필요합니다

web.xml에 기술하는 방식과 @어노테이션을 이용하는 방식입니다.

매핑 URI 어떤 자바가 실행될지 자바파일을 연결시켜주고
sendredirect 혹은 forward로 화면에 호출시켜주는것.

doget, dopost 는 서비스라는 메소드에 호출.
서비스에서 실행하고 끝냄.

객체를 재사용하므로 처리속도가 빨라집니다

소스의 수정이 일어났을때 서버를 다시 실행해야하는 단점이 있습니다.
*/

서블릿이 호출되서 리퀘스트에 어트리뷰트가
서블릿을 호출해야됌

그래서 서블릿을 실행!!

컨트롤러 서블릿이 담당합니다.
컨트롤러가 받아서 처리 할겁니다.
@WebServlet("/12파일업로드/FileList") 경로를 호출하면
req.setAttribute("list", list);
리퀘스트에 세팅해주는것입니다.
화면까지 와서 세팅이 됩니다.

옛날에는 한페이지에 다 담았다

지금은 jsp
유지보수가 너무 힘들어서
MVC

DAO부분을 들어 낸다 데이터베이스 접속하는건!!

jsp에서 자바코드가 섞여 있는건 보기 안좋아 들어내버려!
컨트롤러가 리퀘스트 영역에 저장해주죠
el을 통해서 쓰죠
저장된 객체를 화면에 set태그 이용해서 core라이브러리에 올려서

jsp가 자바코드를 원래 쓸수있는 페이지이지만
표현식도 이용하고 스크립틀릿을 이용해 메소드를 사용할수있지만
앞으로는 서블릿으로 한다(컨트롤러=서블릿)
내가 페이지를 받고 출력해줄게!!

화면이 문제인지 서버가 문제인지 이제 명확해지는것입니다.

서블릿만들때 뒤에도 mvc 게시판 버전ver2.0 가즈아~!★

M 자바빈즈(모델)이 처리하고 ↔ DB ↔ DAO 
V 뷰가 화면을 보여주는것 .jsp
C 서블릿 컨트롤러

처리 결과를 request영역에 저장

jsp 화면에 구현해준다

컨트롤러는 사용자의 요청을 받습니다.
경로를통해서 url을 매핑시켜서 매핑된 경로를 가지고 가서는 컨트롤러를 연결시켜줍니다.
web.xml이나 @어노테이션을 통해서
서비스를 호출 ↔ DAO ↔ DB
리퀘스트영역에 저장되어있는 정보를 뷰가 출력해주는것

컨트롤러와 뷰

소스코드를 리뷰하는 업체가 간간히.. 있지만 피곤하고 지켜야할 룰이 많아서...
ㅎㅎ; 양식... 장/단점이있다.
프리한만큼 소스가.. 정리가 안되어있어서 유지보수가 진짜 더럽겠지...
프로세스를 공통모듈을 뽑아놓으면..
공통모듈 ????? 모르면 또만들고.... 그럼 페이지가 늘어나고... 더러워....

----------------------------------------------------------------------------
model2
14.1 프로젝트 구상 참조(4)

페이지 직접 호출합니까? 아니죠
서블릿을 거쳐서 뷰를 출력해줄겁니다.
서블릿을 만들어야해요
리스트 컨트롤러에 매핑해줘야하잖아
어떤요청이 들어오면 실행해줘~
web.xml에 있는 요청명!!
뷰 경로확인해서 만들어요

리스트가 컨트롤러를 통해서 출력된걸 어떻게 알수있죠!?
주소표시줄.. ㅎㅎ
http://localhost:8080/myServlet/mvcboard/list.do

도서관리시스템 어떤페이지를 만들어야할지를 생각해보세요
서블릿 정의하고 컨트롤러 뷰 정의하고

컨트롤러가 DAO를 호출하면 됩니다.
ListController.java에서 리퀘스트영역에 담고 페이지 전환